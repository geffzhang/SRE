//var topPanel = O2Gui.open<Panel>("{name}",700,400);
"exeToDebug".o2Cache(null);
var exeToDebug = "exeToDebug".o2Cache<string>(()=>{
													"Creating temp exe".info();
													var code = @"using System;													
													using System.Diagnostics;
													public class Program 
													{
														public string here     = ""Here"";
														public string innerMsg = ""[OLA]"";
														public string msg1 = ""[hello]"";
														public int count = 0;
														public static void Main(String[] args) 
														{
															new Program().test();
														}
														
														public void test()
														{
															string msg2 = ""world"";
															while(true)
															{															
														 		Say(msg1 + ""..."" + msg2);	 	
														 		System.Threading.Thread.Sleep(500);
														 	}
														}
														
														
														
														public void Say(String str) 
														{
															count++;
															var local = ""Saying: "" + str + ""  "" + count;
														 	Console.WriteLine(local);	 															 	
														}
													}";
													
													return code.createExe(true);
												});												
									
if (exeToDebug.isNull())									
	return "compilation error";	
var process = exeToDebug.startProcess();
//process.closeInNSeconds(2);
this.sleep(1000);
var controller = new SosController();
var settings = new CdbSettings()
					{
						CdbPath = (clr.x64())
						? @"C:\Program Files\Windows Kits\8.0\Debuggers\x64"
						: @"C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86"
					};
					
controller.field("settings",settings);
					
Action attach = 
	()=>{							
			controller.AttachToProcess(process.Id.str()); 
			controller.setDefaultController();
			controller.loadSoS();				
			"Attached at the moment:{0}".info(controller.Attached);			
		};

var o2Timer = new O2Timer("get data").start(); 

attach();		
 
				
var result = controller.ExecuteCommand("!help");

result = controller.ExecuteCommand("!DumpHeap");

var script = controller.script_Me();
script.Code = 
@"sosController.setDefaultController();
var result = sosController.type_In_Heap(""Program"")
						  .instances().first()
						  .instance_Fields();
return result;						  
//return sosController.types_In_Heap();
//return sosController.sos_Help();
    
//O2Ref:SOS.Net.exe
//O2Ref:SOS.Net.Core.dll
//O2Tag_DontAddExtraO2Files 
//O2File:SoSNet_ExtensionMethods.cs
";
//controller.Detach();
script.onClosed(
	()=>{
			"Parent Form closed, so detaching".info();
			controller.detach();			
			process.closeInNSeconds(2);
		});
o2Timer.stop();

script.insert_Right(40).add_LogViewer()   
	  .insert_Above(45,"Execute SoS Command")
	  .add_TextBox().fill().set_Text("!help").onEnter((text)=>"{0}".info(text.sosExec()));
return controller;

//O2File:API_ConsoleOut.cs
//O2File:_Extra_methods_Roslyn_API.cs
//O2File:SoSNet_ExtensionMethods.cs

//using FluentSharp.FluentRoslyn
//using O2.XRules.Database.Utils
//using SOS.Net
//using SOS.Net.Core.Cdb
//using SOS.Net.Core.Cdb.Commands


//O2Ref:Roslyn.Compilers.dll
//O2Ref:Roslyn.Compilers.CSharp.dll
//O2Ref:SosNet\Debug\SOS.Net.Core.dll
//O2Ref:SosNet\Debug\SOS.Net.exe
//O2Tag_DontAddExtraO2Files