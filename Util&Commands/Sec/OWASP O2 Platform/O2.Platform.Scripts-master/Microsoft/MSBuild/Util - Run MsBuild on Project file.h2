<?xml version="1.0"?>
<H2>
  <SourceCode>return "API_MSBuild.cs".local().compile().executeFirstMethod();

return "ok";
//this is the original script before it was moved into the API_MSBuild()

/*
//var topPanel = O2Gui.open&lt;Panel&gt;("{name}",700,400);
var topPanel = panel.clear().add_Panel();
topPanel.insert_LogViewer();
var msBuild = new API_MSBuild(); 
var buildEnabled = true;
var consoleOut_TextArea = topPanel.insert_Right(300).add_GroupBox("Console Out details").add_TextArea_With_SearchPanel().wordWrap(false);
var tableList = topPanel.clear().add_TableList("O2 Projects Compilation results");
tableList.add_Columns("Project", "Path", "Status", "Time", "Console Out");
 
Action&lt;string&gt; buildProject = 
	(pathToProject) =&gt; { 	
							if (buildEnabled)
							{															
								var buildResult = msBuild.build_Ok(pathToProject); 
								tableList.add_ListViewItem(	pathToProject.fileName(), 
														   	pathToProject, 
														   	buildResult ? "OK" :  "FAILED", 
														   	msBuild.BuildDuration.timeSpan_ToString(),
														   	msBuild.ConsoleOut.str())
										 .foreColor(buildResult, Color.Green, Color.Red);
							}
							else
								"buildEnabled was set to false, so skipping build for: {0}".error(pathToProject);
					   }; 
 
tableList.afterSelect_get_Cell(3, (value)=&gt;consoleOut_TextArea.set_Text(value)); 
tableList.insert_Below(50,"Config").add_CheckBox("Build Enabled",3,0,(value) =&gt; buildEnabled = value).check();

tableList.add_ContextMenu()
		 .add_MenuItem("Recompile project" , true ,
		 	()=&gt;{		 			
		 			buildProject(tableList.selected().values().second());
				})
		 .add_MenuItem("Open Project folder" ,  
		 	()=&gt;{		 			
		 			tableList.selected().values()
		 								.second()
		 								.directoryName()
		 								.startProcess();
				});

//tableList.onDoubleClick_get_Row((row)=&gt; buildProject(row.values().second()));
tableList.columns_Width(200,200,50, 100,-2);

Action&lt;string&gt; buildProjects =
	(fileOrFolder)=&gt;{
						"Loading file(s) from: {0}".info(fileOrFolder);
						if (fileOrFolder.fileExists())
							buildProject(fileOrFolder);
						else
						{
							var files = fileOrFolder.csproj_Files();
							"Found {0} csproj files to process: {0}".info(files.size());
							foreach(var file in files)
								buildProject(file);
						}
					};	

tableList.listView().onDrop(buildProjects);

//var fluentSharp_BaseFolder = @"C:\_WorkDir\Git_O2OPlatform\_O2_Platform_Source_Code\O2.FluentSharp";

//var o2Projects = @"C:\_WorkDir\Git_O2OPlatform\_O2_Platform_Source_Code\O2.Platform.Projects";
*/
//buildProjects(o2Projects);
//load data
/*


var fluentSharp_CoreLib = fluentSharp_BaseFolder.pathCombine(@"O2.FluentSharp.CoreLib\O2.FluentSharp.CoreLib.csproj");
var fluentSharp_BCL 	= fluentSharp_BaseFolder.pathCombine(@"O2.FluentSharp.BCL\O2.FluentSharp.BCL.csproj");


var o2Projects = @"C:\_WorkDir\Git_O2OPlatform\_O2_Platform_Source_Code\O2.Platform.Projects";

//var files = fluentSharp_BaseFolder.csproj_Files();
 
foreach(var file in o2Projects.csproj_Files()) 
{  
	buildProject(file); 	
	return "";
}
return "ok";
   
return o2Projects.files("*.csproj",true);  
 //return msBuild.build_Ok(coreLib);
 
   
return msBuild;  
*/
  
//O2File:API_MSBuild.cs
//O2Tag_DontAddExtraO2Files

</SourceCode>
  <ReferencedAssemblies />
</H2>