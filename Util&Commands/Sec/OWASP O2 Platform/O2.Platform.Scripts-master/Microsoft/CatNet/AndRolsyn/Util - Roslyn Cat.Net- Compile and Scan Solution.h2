O2Setup.extractEmbededConfigZips();
var topPanel = "Util - Roslyn and Cat.Net - OnSave - Compile and Scan Solution".popupWindow(1024,576)    
					.insert_LogViewer();
					 
"CatNet.cs".local().compile().type("CatNet").ctor();  //install Cat.NET if needed
 
"**** CATNet.Core.dll is at: {0}".debug(@"CatNet_1.1/SourceDir/Microsoft.ACESec.CATNet.Core.dll".assembly_Location());


//var topPanel = panel.clear().add_Panel();	 	    
var actionsPanel = topPanel.insert_Above(40,"");     
var codeViewer = topPanel.title("Source Code").add_SourceCodeEditor(); 
var solutionFiles = topPanel.insert_Left(300, "Source Files (in current solution)").add_TreeView_with_PropertyGrid().sort(); 
var errorsList = topPanel.insert_Below(100,"Errors").add_TreeView(); 
var scanResults = topPanel.insert_Right("Security Scan results").add_FindingsViewer(false)
															 	.set_CodeEditor(codeViewer);
scanResults.insert_Below("Trace Details").add_TraceViewer()
										 .afterSelect_showTrace(scanResults)
										 .afterSelect_ShowTraceInCodeEditor(codeViewer)
										 .dontSelectNodeOnLoad();  
var compilerAvailable = true;
var solutionFile = "";
IWorkspace workspace = null;
API_CatNet catNet = null;
 
solutionFiles.beforeExpand<ISolution>( 
	(treeNode,solution)=>{
							treeNode.add_Nodes(solution.Projects, (project)=>project.Name, 
																  (project)=>project, 
																  (project)=> project.HasDocuments, 
																  (project)=> Color.Blue);
						 });

solutionFiles.beforeExpand<IProject>( 
	(treeNode,project)=>{
							var projectDirectory = project.FilePath.directoryName();
							treeNode.add_Nodes(project.Documents, (document)=>document.FilePath.remove(projectDirectory), 
																  (document)=> document, 
																  (document)=> false,  
																  (document)=> Color.DarkBlue);//.Name, (project)=>project, (project)=> project.HasDocuments);
						 });

solutionFiles.afterSelect<IDocument>(
	(document)=>{
					codeViewer.open(document.FilePath);
					//document.details();
				});

												
Action<List<Assembly>> scanAssemblies = 
	(assembllies)=>{
					catNet = new API_CatNet().loadRules();										
					
					"CatNet ready for scan".debug();												 
					//catNet.scan_Assembly(assembly)
					catNet.scan(assembllies)
						  .show(scanResults.parent()); 					
					var nodes = scanResults.getResultsTreeView().nodes();
					if (nodes.size() > 0)
						nodes.first().expand().nodes().first().selected();
				};
				
Action compile = 
	()=>{	
		O2Thread.mtaThread( 
			()=>{
					var o2Timer = new O2Timer("Solution Compilation").start();
					//IWorkspace workspace = Workspace.LoadSolution(solutionFile);
					"Compling Solution: {0}".info(solutionFile);
					ISolution solution = workspace.CurrentSolution;
					errorsList.clear();
					var assembliesToScan = new List<Assembly>();
					foreach(var project in solution.Projects)
					{												
						var assembly = project.compile_And_ReturnUniqueAssembly((errors)=> errorsList.add_Nodes(errors));
						if (assembly.notNull())						
							assembliesToScan.add(assembly);
					}											
					errorsList.backColor(errorsList.nodes().size() > 0 ? Color.LightPink : Color.Azure)
							  .selectFirst()
							  .focus()
							  .parent<GroupBox>().set_Text("Compilation Errors: {0} : {1}".format(errorsList.nodes().size(), o2Timer.stop()));
						//var assembly = compilation.create_Assembly();			
					if (errorsList.nodes().size() == 0)
						scanAssemblies(assembliesToScan);														
					compilerAvailable = true;	
				});
	}; 

EventHandler<WorkspaceEventArgs> workspaceChanged = 
	(sender,e)=>{
					// this is being triggered to many times					
					//"e: {0}".error(e.Kind);					
					if (compilerAvailable)
					{
						"Workspace changed, triggering compilation".debug();					
						compilerAvailable = false;
						compile();
					}
					//compile(); 
				};

Action<string> loadSolution =
	(_solutionFile)=>{ 	
					"Loading File: {0}".info(_solutionFile);
					if (_solutionFile.extension(".sln").isFalse())
						return;																
					solutionFile = _solutionFile;
//					sourceCodeFiles.clear();
					errorsList.clear().add_Node("Compiling solution....");
					codeViewer.open("");
					workspace = Workspace.LoadSolution(solutionFile, null,null, true);
					topPanel.onClosed(()=>
						{						
							"On TopPanel closed".debug();
							workspace.Dispose();
							compilerAvailable = false;
							//"Directly disposing the filetracker".info();
							//var field = (FieldInfo)typeof(Roslyn.Services.Host.HostWorkspace).field("fileTracker");
							//PublicDI.reflection.getFieldValue(field, workspace).invoke("Dispose");
						});
					workspace.WorkspaceChanged += workspaceChanged;
					
					solutionFiles.clear().add_Node(workspace.CurrentSolution.FilePath.fileName(), workspace.CurrentSolution,workspace.CurrentSolution.HasProjects).color(Color.Orange);
					solutionFiles.expand();
					compile();
/*					var files = (from project in workspace.CurrentSolution.Projects
								from document in project.Documents
								select document).toList();
					sourceCodeFiles.add_Nodes(files, (file)=>file.Name);
					actionsPanel.control<TextBox>(true).set_Text(solutionFile);
					*/
				};
		
errorsList.afterSelect<Diagnostic>(  
	(diagnostic)=>{
					var lineSpan = diagnostic.Location.GetLineSpan(true);
					codeViewer.open(lineSpan.Path);
					codeViewer.gotoLine(lineSpan.StartLinePosition.Line + 1);					 
					errorsList.focus();
			      });

actionsPanel.add_Link("Re-compile loaded solution", ()=> compile())
	     .append_Label("Current Solution File (you can drop a *.sln file here to load it):").autoSize()
	     .append_TextBox("").align_Right();

topPanel.onDrop(loadSolution);	
//sourceCodeFiles.onDrop(loadSolution);
errorsList.parentForm().onDrop(loadSolution);
			
Action openTestSolution = 
	()=>{
			var tmpDir = "SuperSecureBankService_Solution".tempDir(false);
			var ssbSolution = tmpDir.files(true,"*.sln").first();
			if (ssbSolution.isNull())
			{
				"SuperSecureBankService.zip".local().info().unzip(tmpDir.info());
				ssbSolution = tmpDir.files(true,"*.sln").first();
			}
			
			loadSolution(ssbSolution);
		};

var workspaceScriptMe_Script = 
@"var workspace = (Workspace)loadedWorkspace;
return workspace;

//using Roslyn.Services
//O2Tag_SetInvocationParametersToDynamic
//O2Ref:Roslyn.Services.dll
//O2Tag_DontAddExtraO2Files
//O2Ref:Microsoft.CSharp.dll";
		
topPanel.mainMenu()
		.add_Menu("File")
			.add("Open Solution", ()=> loadSolution(topPanel.askUserForFileToOpen()))
			.add("Open Test Solution (SuperSecureBank WebServices" , openTestSolution)
		.add_Menu("REPL")
			.add("Open C# REPL Script Environment", ()=> open.scriptEditor())
			.add("REPL this GUI", ()=> topPanel.parentForm().script_Me("form"))
			.add("REPL CatNet API object", ()=> catNet.script_Me()) 
			.add("REPL IWorkspace (from Roslyn)", ()=> workspace.script_Me().Code = workspaceScriptMe_Script);
		
openTestSolution();
//O2File:API_CatNet.cs
//O2File:_Extra_methods_Roslyn_API.cs
//O2File:Findings_ExtensionMethods.cs

//using O2.XRules.Database.APIs
//using FluentSharp.FluentRoslyn
//using O2.XRules.Database.Findings;
//using Roslyn.Compilers.CSharp
//using System.Threading
//using System.Reflection
//using Roslyn.Services
//O2Ref:Roslyn.Services.dll
//O2Ref:Roslyn.Compilers.dll
//O2Ref:Roslyn.Compilers.CSharp.dll
//O2Ref:FluentSharp.Roslyn.dll 

//O2Tag_DontAddExtraO2Files

//Files for Stand-alone package
//O2Package:cheshire_cat.ico
//O2Package:CatNet.cs
//O2Package:API_CatNet.cs
//O2Package:API_CatNet_GUI.cs

//O2Package:Tool_API.cs
//O2Package:_7_Zip.cs
//O2Package:API_LessMsi.cs
//O2Package:LessMsi.cs
//O2Package:API_ConsoleOut.cs
//O2Package:SuperSecureBankService.zip